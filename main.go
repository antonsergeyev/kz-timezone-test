package main

import (
	"fmt"
	"time"
)

func main() {
	now := time.Now()

	fmt.Printf("–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π —Ç–∞–π–º–∑–æ–Ω–µ: %s\n", now.Format(time.RFC3339))

	boundsStart, boundsEnd := now.ZoneBounds()
	fmt.Printf("–î–∏–∞–ø–∞–∑–æ–Ω –¥–µ–π—Å—Ç–≤–∏—è —Ç–µ–∫—É—â–µ–π —Ç–∞–π–º–∑–æ–Ω—ã: %s –¥–æ %s\n", boundsStart.Format(time.RFC3339), boundsEnd.Format(time.RFC3339))

	timeInMarch := time.Date(2024, 3, 1, 2, 0, 0, 0, time.Local)
	marchBoundsStart, marchBoundsEnd := timeInMarch.ZoneBounds()
	fmt.Printf("–î–∏–∞–ø–∞–∑–æ–Ω –¥–µ–π—Å—Ç–≤–∏—è —Ç–∞–π–º–∑–æ–Ω—ã –≤ –º–∞—Ä—Ç–µ 2024: %s –¥–æ %s\n", marchBoundsStart.Format(time.RFC3339), marchBoundsEnd.Format(time.RFC3339))

	if marchBoundsStart.Equal(boundsStart) {
		fmt.Printf("üëé –î–∏–∞–ø–∞–∑–æ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è —Ç–µ–∫—É—â–µ–π —Ç–∞–π–º–∑–æ–Ω—ã –∏ —Ç–∞–π–º–∑–æ–Ω—ã –≤ –º–∞—Ä—Ç–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –í–µ—Ä–æ—è—Ç–Ω–æ, –ø–∞–∫–µ—Ç tzdata –Ω–µ –æ–±–Ω–æ–≤–ª—ë–Ω, –ª–∏–±–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è —Ç–∞–π–º–∑–æ–Ω–∞.\n")
	} else {
		fmt.Printf("üëç –î–∏–∞–ø–∞–∑–æ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è —Ç–µ–∫—É—â–µ–π —Ç–∞–π–º–∑–æ–Ω—ã –∏ —Ç–∞–π–º–∑–æ–Ω—ã –≤ –º–∞—Ä—Ç–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –í–µ—Ä–æ—è—Ç–Ω–æ, –ø–∞–∫–µ—Ç tzdata —É–∂–µ –æ–±–Ω–æ–≤–ª—ë–Ω.\n")
	}

	almaty, err := time.LoadLocation("Asia/Almaty")
	if err != nil {
		fmt.Printf("üëé –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–π–º–∑–æ–Ω—É Asia/Almaty: %s. –í–µ—Ä–æ—è—Ç–Ω–æ, –≤ –û–° –∏–ª–∏ –æ–±—Ä–∞–∑–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞–∫–µ—Ç tzdata.\n", err)
	} else {
		fmt.Printf("–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ç–∞–π–º–∑–æ–Ω–µ Asia/Almaty: %s\n", now.In(almaty).Format(time.RFC3339))

		if !now.In(almaty).Equal(now) {
			fmt.Printf("üëé –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π —Ç–∞–π–º–∑–æ–Ω–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º Asia/Almaty! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–∞–π–º–∑–æ–Ω—É Asia/Almaty –∏–ª–∏ utc+6.\n")
		}
	}
}
