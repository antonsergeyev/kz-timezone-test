package main

import (
	"flag"
	"fmt"
	"os"
	"os/exec"
	"time"
)

func main() {
	phpPathFlag := flag.String("php-path", "", "–ø—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É PHP, –µ—Å–ª–∏ —Ç–∞–∫–∂–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–π–º–∑–æ–Ω—ã –≤ PHP")
	flag.Parse()

	isOk := true
	now := time.Now()
	fmt.Printf("–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π —Ç–∞–π–º–∑–æ–Ω–µ: %s\n", now.Format(time.RFC3339))

	offsetName, offset := now.Zone()
	boundsStart, boundsEnd := now.ZoneBounds()
	fmt.Printf(
		"–¢–µ–∫—É—â–∏–π —Å–º–µ—â–µ–Ω–∏–µ: %s (%d —Å–µ–∫—É–Ω–¥), –¥–µ–π—Å—Ç–≤—É–µ—Ç –æ—Ç %s –¥–æ %s\n",
		offsetName, offset,
		boundsStart.Format(time.RFC3339), boundsEnd.Format(time.RFC3339),
	)

	timeInMarch := time.Date(2024, 3, 1, 2, 0, 0, 0, time.Local)
	marchOffsetName, marchOffset := timeInMarch.Zone()
	marchBoundsStart, marchBoundsEnd := timeInMarch.ZoneBounds()
	fmt.Printf(
		"–°–º–µ—â–µ–Ω–∏–µ –≤ –º–∞—Ä—Ç–µ 2024: %s (%d —Å–µ–∫—É–Ω–¥), –¥–µ–π—Å—Ç–≤—É–µ—Ç –æ—Ç %s –¥–æ %s\n",
		marchOffsetName, marchOffset,
		marchBoundsStart.Format(time.RFC3339), marchBoundsEnd.Format(time.RFC3339),
	)

	if marchOffset != 60*60*5 {
		isOk = false
		fmt.Printf("üëé –°–º–µ—â–µ–Ω–∏–µ –≤ –º–∞—Ä—Ç–µ –Ω–µ —Ä–∞–≤–µ–Ω –æ–∂–∏–¥–∞–µ–º–æ–º—É. –í–µ—Ä–æ—è—Ç–Ω–æ, –ø–∞–∫–µ—Ç tzdata –Ω–µ –æ–±–Ω–æ–≤–ª—ë–Ω, –ª–∏–±–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ª–∏–±–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è —Ç–∞–π–º–∑–æ–Ω–∞.\n")
	} else {
		fmt.Printf("üëç –°–º–µ—â–µ–Ω–∏–µ –≤ –º–∞—Ä—Ç–µ —Ä–∞–≤–µ–Ω –æ–∂–∏–¥–∞–µ–º–æ–º—É. –í–µ—Ä–æ—è—Ç–Ω–æ, –ø–∞–∫–µ—Ç tzdata —É–∂–µ –æ–±–Ω–æ–≤–ª—ë–Ω.\n")
	}

	almaty, err := time.LoadLocation("Asia/Almaty")
	if err != nil {
		isOk = false
		fmt.Printf("üëé –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–π–º–∑–æ–Ω—É Asia/Almaty: %s. –í–µ—Ä–æ—è—Ç–Ω–æ, –≤ –û–° –∏–ª–∏ –æ–±—Ä–∞–∑–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞–∫–µ—Ç tzdata.\n", err)
	} else {
		fmt.Printf("–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ç–∞–π–º–∑–æ–Ω–µ Asia/Almaty: %s\n", now.In(almaty).Format(time.RFC3339))

		if !now.In(almaty).Equal(now) {
			isOk = false
			fmt.Printf("üëé –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π —Ç–∞–π–º–∑–æ–Ω–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º Asia/Almaty. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–∞–π–º–∑–æ–Ω—É Asia/Almaty –∏–ª–∏ utc+6.\n")
		}
	}

	if *phpPathFlag != "" {
		phpInfo, phpErr := checkPhpTimezone(*phpPathFlag)
		if phpErr != nil {
			isOk = false
			fmt.Printf(phpErr.Error() + "\n")
		}

		fmt.Println(phpInfo)
	}

	if !isOk {
		os.Exit(-1)
	}
}

// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –¥–ª—è –¥–∞—Ç –ø–æ—Å–ª–µ –º–∞—Ä—Ç–∞ 2024 –≤ Asia/Almaty PHP –≤–µ—Ä–Ω—ë—Ç –æ—Ñ—Ñ—Å–µ—Ç, —Ä–∞–≤–Ω—ã–π 5 —á–∞—Å–∞–º
func checkPhpTimezone(phpPath string) (string, error) {
	cmd := exec.Command(
		phpPath,
		"-r",
		`echo (new \DateTime('2024-03-02T00:00:00', new \DateTimeZone('Asia/Almaty')))->getOffset();`,
	)
	out, err := cmd.CombinedOutput()
	if err != nil {
		return "", fmt.Errorf("üëé –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–π–º–∑–æ–Ω–µ PHP %s: %w", phpPath, err)
	}

	expected := "18000"

	if string(out) != expected {
		return "", fmt.Errorf(
			`üëé –°–º–µ—â–µ–Ω–∏–µ –≤ –º–∞—Ä—Ç–µ –Ω–∞ PHP %s –Ω–µ —Ä–∞–≤–µ–Ω –æ–∂–∏–¥–∞–µ–º–æ–º—É: –ø–æ–ª—É—á–∏–ª–∏ %s, –æ–∂–∏–¥–∞–ª–æ—Å—å %s —Å–µ–∫—É–Ω–¥. `+
				`–ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ timezonedb: https://serverpilot.io/docs/how-to-update-the-php-timezonedb-version/`,
			phpPath,
			expected,
			string(out),
		)
	} else {
		return fmt.Sprintf("üëç –°–º–µ—â–µ–Ω–∏–µ –≤ –º–∞—Ä—Ç–µ –Ω–∞ PHP %s —Ä–∞–≤–µ–Ω –æ–∂–∏–¥–∞–µ–º–æ–º—É: %s", phpPath, string(out)), nil
	}
}
